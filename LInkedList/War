package LInkedList;

import java.util.Scanner;
import java.util.concurrent.TimeUnit;

public class War {
	private Deck d = new Deck(); //original deck
	private MyLinkedList<Card> deck1 = new MyLinkedList<Card>(); //player 1 deck
	private MyLinkedList<Card> deck2 = new MyLinkedList<Card>(); //player 2 deck
	private static Scanner readinput = new Scanner(System.in);
	private static String player1_name = "player 1";
	private static String player2_name = "Computer";
	
	public void separateDeck() { //separate the deck into two players
		int size = d.getSize();
		d.shuffle();
		for(int i=0; i<size; i++) {
			if(i %2 == 0) {
				deck1.add(d.getCard(i));
			}else {
				deck2.add(d.getCard(i));
			}
		}
	}
	
	public void displayDeck1() { //tester function for displaying deck
		for(int i=0; i<26; i++) {
			deck1.get(i).print();
		}
	}
	
	public void displayDeck2() { //tester function for displaying deck
		for(int i=0; i<26; i++) {
			deck2.get(i).print();
		}
	}
	
	public void one_player() throws InterruptedException { // main game process
		while(deck1.size()>0 && deck1.size()>0) { //while the size of deck is not zero
			one_set();
			System.out.println("press enter to deal cards");
			String enterkey = readinput.nextLine();
			if(!enterkey.equals("")) { // check enter
				if(deck1.size()==0 || deck2.size()==0) {
					continue;
				}
				break;
			}
		}
		if(deck1.size()==0) { //print the result
			System.out.println(player2_name+ " won the game.");
		}
		if(deck2.size()==0) { //print the result
			System.out.println(player1_name+" won the game.");
		}
		
	}
	
	public void one_set() throws InterruptedException { //one set of game
		Card card1 = deck1.remove(0); //shows the card of each player
		System.out.print(player1_name+" plays the ");
		card1.print();
		TimeUnit.MILLISECONDS.sleep(500);
		Card card2 = deck2.remove(0);
		System.out.print(player2_name+" plays the ");
		card2.print();
		TimeUnit.MILLISECONDS.sleep(500);
		int won_player = who_won(card1,card2); //get who won
		if(won_player == 1) { //player1 won
			System.out.println(player1_name+" wins the game");
			deck1.add(card1);
			deck1.add(card2);
		}else if(won_player == 2) {//player2 won
			System.out.println(player2_name+" wins the game");
			deck2.add(card1);
			deck2.add(card2);
		}else { //tie
			System.out.println("Tie.");
			System.out.println("Drawing three more cards from each player.");
			System.out.println("--------------------------------------");
			tie(1,card1,card2);
		}
		TimeUnit.MILLISECONDS.sleep(500);
		System.out.print(player1_name+" has "+deck1.size()+" cards ");
		System.out.println(player2_name+" has "+deck2.size()+" cards");
	}
	
	public void tie(int ties,Card card1, Card card2) throws InterruptedException { //when tie.
		Card[] player1 = new Card[1+ties*3]; //set of card (4 cards)
		Card[] player2 = new Card[1+ties*3];
		for(int i=0; i<1+ties*3; i++) {
			player1[i] = deck1.remove(0); //get 4 cards from each player
			player2[i] = deck2.remove(0);
		}
		System.out.print(player1_name+" plays the ");
		player1[ties*3].print();
		TimeUnit.MILLISECONDS.sleep(500);
		System.out.print(player2_name+" plays the ");
		player2[ties*3].print();
		TimeUnit.MILLISECONDS.sleep(500);
		
		int won_player = who_won(player1[ties*3], player2[ties*3]); //get who won
		if(won_player == 1) { //player 1 won
			System.out.println(player1_name+ " wins the game");
			for(int i=0; i<1+ties*3; i++) {
				deck1.add(player1[i]);
				deck1.add(player2[i]);
			}
			deck1.add(card1);
			deck1.add(card2);
			
		}else if(won_player == 2) { //player 2 won
			System.out.println(player2_name+" wins the game");
			for(int i=0; i<1+ties*3; i++) {
				deck2.add(player1[i]);
				deck2.add(player2[i]);
			}
			deck2.add(card1);
			deck2.add(card2);
		}else { //tie again
			System.out.println("Tie.");
			System.out.println("Drawing three more cards from each player.");
			tie(ties+1,card1,card2);
		}
		TimeUnit.MILLISECONDS.sleep(500);
		
	}
	
	
	public int who_won(Card first, Card second){ //return the winner base on the number of the card
		
		int first_num = first.getNum();
		int second_num = second.getNum();
		
		if(first_num>second_num) {
			return 1; 
		}else if(first_num<second_num){
			return 2;
		}else {
			return 0;
		}
	}
	
	public static void main(String[] args) throws InterruptedException {
		War runner = new War();
		System.out.println("****WAR****");
		System.out.println("One player enter 1 Two player enter 2"); //setting name for each player
		String answer = readinput.nextLine();
		if(answer.equals("1")) {
			System.out.println("Player 1 name:");
			answer = readinput.nextLine();
			player1_name = answer;
		}else if(answer.equals("2")) {
			System.out.println("Player 1 name:");
			answer = readinput.nextLine();
			player1_name = answer;
			System.out.println("Player 2 name:");
			answer = readinput.nextLine();
			player2_name = answer;
		}else {
			System.out.println("Just playing as one player...");
			System.out.println("Player 1 name:");
			answer = readinput.nextLine();
			player1_name = answer;
		}
		System.out.print("shuffling the card.");
		for(int i=0; i<5; i++) {
			TimeUnit.SECONDS.sleep(1);
			System.out.print(".");
		}
		System.out.println();
		runner.separateDeck();
		runner.one_player();
		
	}
}
