package dijkstra;

import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class PubgMap {
		
	private final int WIDTH = 800;
	private final int MAP_PIN_WIDTH = 20;
	private boolean isConnecting = false;
	
	private Dijkstra map = new Dijkstra("pubgMap.txt");
	
	public int calculateDistance(String p1, String p2) {
		return (int)Math.sqrt(Math.pow((Integer.parseInt(p2.split(",")[1])-Integer.parseInt(p1.split(",")[1])), 2) + Math.pow((Integer.parseInt(p2.split(",")[2])-(Integer.parseInt(p1.split(",")[2]))), 2));
	}

	public void writeFile() throws IOException {
		//write file for the save function of the game
		FileWriter out = new FileWriter("pubgMap.txt");
		for(String p: map.g.keySet()) { //save places
			out.write(p.toString()+"\n");
		}
		out.write("\n");
		for(String p: map.g.keySet()) { //save connections
			out.write(p+" ");
			for(String nei: map.getVertex(p).getNeighbors()){
				out.write(nei+" "+calculateDistance(p,nei)+" ");
			}
			out.write("\n");
		}
		
		out.close();
	}
	
	public PubgMap() throws IOException {
		
		JPanel mainContainer = new JPanel() {
			public void paint (Graphics g) {
				try {
					map.paint(g);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		};
		
		
		JFrame frame = new JFrame();
		
		frame.setSize(WIDTH, WIDTH);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.add(mainContainer);
		frame.setLocationRelativeTo(null);
		frame.setResizable(true);
		frame.setVisible(true);
		frame.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				//when the window close, save.
				try {
					writeFile();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
	    });
		mainContainer.setFocusable(true);
		mainContainer.addMouseListener(new MouseListener() {
			
			String p1 = null;
			String p2 = null;
			
			@Override
			public void mouseClicked(MouseEvent e) {
				
			}

			@Override
			public void mousePressed(MouseEvent e) {
				//when the mouse is pressed, check all the location whether it is clicked or not
				for(String p:map.g.keySet()) {
					if(map.g.get(p).isOn(e.getX(), e.getY())){ //if it is clicked,
						isConnecting = true;
						map.g.get(p).changeSel();
						if(map.g.get(p).isSelected()) { //save the location
							if(p1==null) {
								p1 = p;
							}else {
								p2 = p;
							}
						}
					}
				}
				
				if(!isConnecting) { //if the clicked location is not on the map, save the new location
					String name = JOptionPane.showInputDialog("What is the place's name?");
					for(String p: map.g.keySet()) {
						if(map.g.get(p).getName() == name) {
							JOptionPane.showMessageDialog(mainContainer, "Places cannot have same name!", "Error", JOptionPane.ERROR_MESSAGE);
						}
					}
					int newX  = e.getX();
					int newY = e.getY();
					map.addVertex(name+","+(newX-MAP_PIN_WIDTH/2)+","+(newY-MAP_PIN_WIDTH)); //add vertex to the map
					
				}else {
					if(p2 != null) { //if two placed is clicked, connect them.
						map.connect(p1, p2, (int)calculateDistance(p1,p2));
						isConnecting = false; //reset to the initial state, where no location is selected.
						p1 = null;
						p2 = null;
						for(String p: map.g.keySet()) {
							if(map.g.get(p).isSelected()) {
								map.g.get(p).changeSel();
							}
						}
					}
				}
				mainContainer.repaint();
			}

			@Override
			public void mouseReleased(MouseEvent e) {
			}

			@Override
			public void mouseEntered(MouseEvent e) {
			}

			@Override
			public void mouseExited(MouseEvent e) {
			}
			
		});
		
	}
	
	public static void main(String[] args) throws IOException {
		PubgMap runner = new PubgMap();
	}
}
