package dijkstra;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

import javax.imageio.ImageIO;


public class Dijkstra{
	
	private final int WIDTH = 800;
	HashMap<String, Vertex> g = new HashMap<>(); //hash map with data to each vertex
	private final int MAP_PIN_WIDTH = 20;
	
	class Vertex{
		String info; //name of the place
		private int x; // location
		private int y;
		private boolean selected; //is the place selected by user
		HashSet<Edge> neighbors = new HashSet(); //neighbors that are connected to the vertex
		
		public Vertex(String info) { //constructor
			this.info = info.split(",")[0];
			x = Integer.parseInt(info.split(",")[1]);
			y = Integer.parseInt(info.split(",")[2]);
		}
		
		public String getName() {
			return info;
		}
		public int getX() {
			return x;
		}
		
		public int getY() {
			return y;
		}
		
		public boolean isOn(int m_x, int m_y) { // did the mouse clicked the map pin
			return (m_x>=x && m_x<=x+MAP_PIN_WIDTH && m_y>=y && m_y<=y+MAP_PIN_WIDTH);
		}
		
		public boolean isSelected() {
			return selected;
		}
		
		public String toString() {
			return info + "," + x+ ","+y;
		}
		
		public ArrayList<String> getNeighbors() { //get all the neighbor location of the vertex
			ArrayList<String> nei = new ArrayList<String>();
			for(Edge e: neighbors) {
				nei.add(e.getOtherVertex(this).toString());
			}
			return nei;
		}
		
		public void changeSel() { //change the selected value
			selected = !selected;
		}
		
	}
	
	private class Edge{
		Vertex v1, v2; //two edges that are connected through this edge
		int dist; //information of the edge
		boolean selected; //is the edge on the path
		public Edge(Vertex v1, Vertex v2, int dist) { //constructor
			this.v1 = v1;
			this.v2 = v2;
			this.dist = dist;
		}
		
		public String toString() { //return the information of the vertex
			return v1.toString() +" - "+dist+" - "+v2.toString();
		}
		
		public int getDist() { //only returns the information
			return dist;
		}
		
		public Vertex getOtherVertex(Vertex v) { //get the opposite vertex of the input
			if(v == v1) {
				return v2;
			}else {
				return v1;
			}
		}
	}
	
	
	public void addVertex(String info) { //add vertex to the graph
		g.put(info, new Vertex(info));
		
	}

	public void connect(String info1, String info2, int label) { //connect two vertex with a edge
		if(g.get(info1)==null || g.get(info2)==null) { //give null pointer exception if the vertex does not exist
			throw (new NullPointerException());
		}else {
			//get information from vertex and create new edge with given informations.
			Vertex v1 = g.get(info1);
			Vertex v2 = g.get(info2);
			Edge lableEdge = new Edge(v1,v2, label);
			v1.neighbors.add(lableEdge);
			v2.neighbors.add(lableEdge);
		}
		
	}
	
	public Vertex getVertex(String info) { //get a vertex with the information.
		return g.get(info);
		
	}
	
	public HashSet getNeighbors(String info) { //get neighbors of the vertex
		return getVertex(info).neighbors;
	}
	
	public String toString() { //print the whole graph
		
		String s = "";
		
		for(String key: g.keySet()) {
			s+= key + "\n";
			
			for(Edge e: g.get(key).neighbors){
				s+= "["+e.getOtherVertex(g.get(key))+" "+e.dist+"] ";
			}
			s+="\n";
		}
		
		return s;
	}
	
	public void remove(String info) { //remove vertex from the graph
		for(Edge v : g.get(info).neighbors) {
			v.getOtherVertex( g.get(info)).neighbors.remove(v); 
			//go through whole vertex and remove the selected vertex from the neighbors list of connected vertexes.
		}
		g.remove(info);
	}
	
	public int size() {
		return g.size(); //size of the graph
	}
	
	
	public ArrayList<String> dijkstra(String startInfo,String endInfo) {

		
		Vertex start = getVertex(startInfo);
		Vertex end = getVertex(endInfo);
		Vertex curr = start;
		
		PriorityQueue<Vertex> toVisit = new PriorityQueue<Vertex>();
		HashMap<Vertex,Boolean> visited = new HashMap<Vertex,Boolean>();
		HashMap<Vertex,Vertex> leadsTo = new HashMap<Vertex,Vertex>();
		HashMap<Vertex,Integer> distance = new HashMap<Vertex,Integer>();
		
		
		for(String key: g.keySet()) {
			distance.put(g.get(key), Integer.MAX_VALUE);  //setting all distance to maximum
			visited.put(g.get(key),false); //making every vertex not visited yet
			for(Edge e: g.get(key).neighbors){
				e.selected = false;
			}
		}
		
		toVisit.add(start, 0);  //put start vertex to toVisit
		distance.put(start, 0);
		
		while(toVisit.getSize() != 0) {
			curr=toVisit.pop();
			if(curr == end) {
				return PrintBackTrace(leadsTo,start,end);
			}else {
				for(Edge e: curr.neighbors) {
					Vertex n = e.getOtherVertex(curr); //the neighbor vertex
					if(!visited.get(n)) { //if it is not visited yet,
						int newD = distance.get(curr) + e.dist; //calculate the distance from start
						if(newD<distance.get(n)) { //if the new Distance is shorter
							distance.put(n, newD);
							toVisit.add(n, newD);
							leadsTo.put(n,curr);
						}
						
					}
				}
			}
		}
		
		return null;
		
	}
	
	public ArrayList<String> PrintBackTrace(HashMap<Vertex,Vertex> map, Vertex start, Vertex end) { //print the back traced list.
		//back trace the leadsTo list to find the whole path
		
		ArrayList<Edge> path = new ArrayList<Edge>(); //ArrayList of edges that lead start to end
		Vertex curr = end;// start with the end point
			
		while(curr != null) { //if the current is not the start vertex,
					
			for(Edge e : curr.neighbors) { // look at all neighbors
				if(e.getOtherVertex(curr)== map.get(curr)) {
				//if there is a edge in the leadsTo map, that connect the neighbor and the current vertex, add it to the path
					path.add(0,e);
				}
			}
			curr = map.get(curr); //move the current vertex that current was originated from.
		}
		
		ArrayList<String> ans = new ArrayList<String>(); //make the path into string
		curr = start;
		
		for(Edge e: path) {
			e.selected = true;
			ans.add(curr.toString());
			curr = e.getOtherVertex(curr);
		}
		ans.add(curr.toString());
		
		return ans;
	}
	
	public Dijkstra(String fileName) throws FileNotFoundException{ //constructor
		File f = new File(fileName); //read the file
	    Scanner read = new Scanner(f);
	    
	    while(read.hasNext()) { //get all the locations
	    	String temp = read.nextLine();
	    	if(temp.length()!=0) {
	    		addVertex(temp);
	    	}else {
	    		break;
	    	}
	    }
	    
	    while(read.hasNext()) { //get all the connections
	    	String[] temp = read.nextLine().split(" ");
	    	if(temp.length!=1) {
	    		for(int i=1; i<temp.length; i+=2) { //connect each locations until the line is over
	    			if(!g.get(temp[0]).getNeighbors().contains(temp[i])) {
	    				connect(g.get(temp[0]).toString(), g.get(temp[i]).toString(), Integer.parseInt(temp[i+1]));
	    			}
	    		}
	    	}else {
	    		break;
	    	}
	    }
	    
	}
	
	public void paint (Graphics g1) throws IOException {
		g1.drawImage(ImageIO.read(new File("erangel.jpg")).getScaledInstance(WIDTH, WIDTH, Image.SCALE_SMOOTH), 0, 0, WIDTH, WIDTH, null);
		Set<Vertex> visited = new HashSet<Vertex>(); //visited vertex list for the check if the edge distance is already shown
		g1.setFont(new Font ("Comic Sans", 1, 17));
		
		for(String p: g.keySet()) {
			try {
				visited.add(g.get(p));
				if(g.get(p).isSelected()) { //draw location pin
					//if the location is selected, show different color of map pin
					g1.drawImage(ImageIO.read(new File("mapPin_selected.png")).getScaledInstance(MAP_PIN_WIDTH, MAP_PIN_WIDTH, 0), g.get(p).getX(), g.get(p).getY(), null);
				}else {
					g1.drawImage(ImageIO.read(new File("mapPin.png")).getScaledInstance(MAP_PIN_WIDTH, MAP_PIN_WIDTH, 0), g.get(p).getX(), g.get(p).getY(), null);
				}
				
				for(Edge nei: g.get(p).neighbors) { //draw the edge
					if(!visited.contains(nei.getOtherVertex(g.get(p)))) { //check the edge is already drawn or not
						if(nei.selected) { //for the path, edge has different color
							g1.setColor(Color.cyan);
							g1.drawString(nei.dist+"", (g.get(p).getX()+MAP_PIN_WIDTH/2+nei.getOtherVertex(g.get(p)).getX()+MAP_PIN_WIDTH/2)/2, (g.get(p).getY()+MAP_PIN_WIDTH+nei.getOtherVertex(g.get(p)).getY()+MAP_PIN_WIDTH)/2);
						}else {
							g1.setColor(Color.red);
						}	
						g1.drawLine(g.get(p).getX()+MAP_PIN_WIDTH/2, g.get(p).getY()+MAP_PIN_WIDTH, nei.getOtherVertex(g.get(p)).getX()+MAP_PIN_WIDTH/2, nei.getOtherVertex(g.get(p)).getY()+MAP_PIN_WIDTH);
				
					}
				}
				
				g1.setColor(Color.white);
				g1.drawString(g.get(p).getName(), g.get(p).getX(), g.get(p).getY()); //draw the name of the location
				
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	
	public static void main(String[] args) throws FileNotFoundException { //testing
		Dijkstra graph = new Dijkstra("DijkstraTest");
		System.out.println(graph.dijkstra("A,a", "E,e"));
		
	}
}
