package map;

import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;

public class HuffmanEncoding {
	
	private PriorityQueue<Branch<Character>> pq = new PriorityQueue<Branch<Character>>();
	private HashMap<Character, Integer> freqMap;
	private HashMap<Character,String> codeMap = new HashMap<Character,String>();
	private Branch<Character> mainRoot;
	
	public void makeTree() {
		while(pq.getSize()>1) {
			int priority = pq.getPriority(0);
			Branch<Character> leftLeaf = pq.pop();
			//System.out.print("left " + leftLeaf.info+" ");
			//System.out.println(leftLeaf.isLeaf);
			
			priority += pq.getPriority(0);
			Branch<Character> rightLeaf =  pq.pop();
			//System.out.print("right " +rightLeaf.info+" ");
			//System.out.println(rightLeaf.isLeaf);
			
			Branch<Character> root = new Branch<Character>(rightLeaf,leftLeaf);
			//System.out.print("root " + root.info+" ");
			//System.out.println(root.isLeaf);
			pq.add(root, priority);
		}
		mainRoot = pq.pop();
		//System.out.println("**********");
	}
	
	public void getCode(String code, Branch<Character> b) {
		if(b.isLeaf) {
			//System.out.println(b.info);
			//System.out.println(code);
			codeMap.put(b.info, code);
		}else {
			//System.out.println(b.info);
			//System.out.println(code);
			getCode(code+"0",b.left);
			getCode(code+"1",b.right);
		}
	}
	
	public void fileReader(String fileName) throws IOException {
		freqMap = new HashMap<Character,Integer>();

		FileReader fr = new FileReader(fileName); 
		int letter;
		while ((letter = fr.read()) != -1) {
			char letter_ch = (char)letter;
            if(freqMap.get(letter_ch)==null) {
            	freqMap.put(letter_ch,1);
            }else {
            	freqMap.put(letter_ch,freqMap.get(letter_ch)+1);
            }
        }
	}
	
	public void buildPQ() {
		for(Character a: freqMap.keySet()) {
			pq.add(new Branch<Character>(a), freqMap.get(a));
		}
	}
	
	public void writeFile(String FileName) throws IOException {
		FileReader fr = new FileReader(FileName); 
		BufferedBitWriter write = new BufferedBitWriter("compressed file");
		int letter;
		while ((letter = fr.read()) != -1) {
			String code =codeMap.get(((char)letter));
			while(code.length()>0) {
				if(code.charAt(0)=='0') {
					write.writeBit(false);
				}else {
					write.writeBit(true);
				}
				code = code.substring(1);
			}
		}
		
		write.close();
	}
	
	public void readCompFile(String fileName) throws IOException {
		BufferedBitReader read = new BufferedBitReader(fileName);
		BufferedWriter out = new BufferedWriter(new FileWriter("decompressed.txt"));
		String currCode = "";
		while (read.hasNext()){ 
			boolean bit = read.readBit(); 
			if(bit) {
				currCode += "1";
			}else {
				currCode += "0";
			}
			
			for(char a: codeMap.keySet()) {
				if(codeMap.get(a).equals(currCode)) {
					out.write(a);
					currCode = "";
					break;
				}
			}
		}
		read.close();
		out.close();
	}
	
	
	public static void main(String[] args) throws IOException {
		HuffmanEncoding runner = new HuffmanEncoding();
		runner.fileReader("WarAndPeace.txt");
		System.out.println("File Readed");
		
		runner.buildPQ();
		System.out.println("Priority Queue");
		
		runner.makeTree();
		System.out.println("Tree Maded");
		
		runner.getCode("",runner.mainRoot);
		System.out.println("Made Code Map");
		
		runner.writeFile("WarAndPeace.txt");
		System.out.println("File Compressed");
		
		runner.readCompFile("compressed file");
		System.out.println("File Decompressed");
		
		//1,811,745  bytes
		//3,223,372  bytes
	}
}
