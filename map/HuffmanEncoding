package map;

import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;

public class HuffmanEncoding {
	
	private PriorityQueue<Branch<Character>> pq = new PriorityQueue<Branch<Character>>();
	private HashMap<Character, Integer> freqMap = new HashMap<Character,Integer>();
	private HashMap<Character,String> codeMap = new HashMap<Character,String>();
	private Branch<Character> mainRoot;
	
	
	//Read the original file
	public void fileReader(String fileName) throws IOException {
		
		FileReader fr = new FileReader(fileName+".txt"); 
		//read each letter and record frequency of each character.
		int letter;
		while ((letter = fr.read()) != -1) {
			char letter_ch = (char)letter;
			// record the frequency into a freqMap in character form
			if(freqMap.get(letter_ch)==null) {
				freqMap.put(letter_ch,1);    
			}else {
				freqMap.put(letter_ch,freqMap.get(letter_ch)+1);
			}
		}
		fr.close();
	}
	
	//build a Priority Queue base on the frequency of each letter.
	//to build a tree later, every information is stored in a form of branch.
	public void buildPQ() {
		for(Character a: freqMap.keySet()) {
			pq.add(new Branch<Character>(a), freqMap.get(a));
		}
	}		
		
	//create the binary tree
	public void makeTree() {
		while(pq.getSize()>1) {
			//get priority of the first thing in the queue and make it as a left leaf
			int priority = pq.getPriority(0); 
			Branch<Character> leftLeaf = pq.pop();
			
			//get priority of the second thing in the queue and make it as a left leaf
			priority += pq.getPriority(0);
			Branch<Character> rightLeaf =  pq.pop();
			
			//make root and attach it to a priority queue again with added priority.
			Branch<Character> root = new Branch<Character>(rightLeaf,leftLeaf);
			pq.add(root, priority);
		}
		mainRoot = pq.pop();
	}
	
	//get code from the binary tree
	public void getCode(String code, Branch<Character> b) {
		if(b.isLeaf) {
			//if it reaches the leaf, put the code value in the map
			codeMap.put(b.info, code);
		}else {
			//reiterate the method until it reaches the leaf.
			getCode(code+"0",b.left);
			getCode(code+"1",b.right);
		}
	}
	
	//compressing a file
	public void writeFile(String FileName) throws IOException {
		FileReader fr = new FileReader(FileName+".txt"); 
		//compressed file
		BufferedBitWriter write = new BufferedBitWriter(FileName+"_compressed.txt");
		//key file for decompressing
		BufferedWriter out = new BufferedWriter(new FileWriter(FileName+"_key.txt"));
		
		// for each letter in the file, compress it into code and 
		//write in a compressed file in new form of character.
		int letter;
		while ((letter = fr.read()) != -1) {
			String code =codeMap.get(((char)letter));
			
			while(code.length()>0) {
				//write code into a compressed file.
				if(code.charAt(0)=='0') {
					write.writeBit(false);
				}else {
					write.writeBit(true);
				}
				code = code.substring(1);
			}
		}
		
		//write a file for a code map in a separate file
		for(char a: codeMap.keySet()){
			out.write(a);
			out.newLine();
			out.write(codeMap.get(a));
			out.newLine();
		}
		
		System.out.println(codeMap);
		out.close();
		write.close();
		fr.close();
	}
	
	public void readCompFile(String fileName) throws IOException {
		BufferedBitReader read = new BufferedBitReader(fileName+"_compressed.txt");
		BufferedWriter out = new BufferedWriter(new FileWriter(fileName+"_decompressed_inmain.txt"));
		String currCode = "";
		while (read.hasNext()){ 
			boolean bit = read.readBit(); 
			if(bit) {
				currCode += "1";
			}else {
				currCode += "0";
			}
			
			for(char a: codeMap.keySet()) {
				if(codeMap.get(a).equals(currCode)) {
					out.write(a);
					currCode = "";
					break;
				}
			}
		}
		read.close();
		out.close();
		System.out.println(codeMap);
	}
	
	
	public static void main(String[] args) throws IOException {
		HuffmanEncoding runner = new HuffmanEncoding();
		//read file
		runner.fileReader("TEXTFILE");
		
		//build Priority Queue
		runner.buildPQ();
		
		//make tree according to the priority queue
		runner.makeTree();
		
		//create code from the binary tree
		runner.getCode("",runner.mainRoot);
		
		//write the compressed file base on the code
		runner.writeFile("TEXTFILE");
		System.out.println("File Compressed");
		
		
		runner.readCompFile("TEXTFILE");
		System.out.println("File Decompressed");
		
		
	}
}
