package graphs;


import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;

public class LGraph<E,T> {
	
	HashMap<E, Vertex> g = new HashMap<>(); //hash map with data to each vertex
	
	private class Vertex{
		E info; //information of the data
		HashSet<Edge> neighbors = new HashSet(); //neighbors that are connected to the vertex
		
		public Vertex(E info) { //constructor
			this.info = info;
		}
		
		public String toString() { 
			return (String)info; //return the information of the vertexas a string
		}
		
	}
	
	private class Edge{
		Vertex v1, v2; //two edges that are connected through this edge
		T info; //information of the edge
		public Edge(Vertex v1, Vertex v2, T info) { //constructor
			this.v1 = v1;
			this.v2 = v2;
			this.info = info;
		}
		
		public String toString() { //return the information of the vertex
			return v1.toString() +" - "+info+" - "+v2.toString();
		}
		
		public String infoToString() { //only returns the information
			return (String)info;
		}
		
		public Vertex getOtherVertex(Vertex v) { //get the opposite vertex of the input
			if(v == v1) {
				return v2;
			}else {
				return v1;
			}
		}
	}
	
	public void addVertex(E info) { //add vertex to the graph
		g.put(info, new Vertex(info));
		
	}

	public void connect(E info1, E info2, T label) { //connect two vertex with a edge
		if(g.get(info1)==null || g.get(info2)==null) { //give null pointer exception if the vertex does not exist
			throw (new NullPointerException());
		}else {
			//get information from vertex and create new edge with given informations.
			Vertex v1 = g.get(info1);
			Vertex v2 = g.get(info2);
			Edge lableEdge = new Edge(v1,v2, label);
			v1.neighbors.add(lableEdge);
			v2.neighbors.add(lableEdge);
		}
		
	}
	
	public Vertex getVertex(E info) { //get a vertex with the information.
		return g.get(info);
		
	}
	
	public HashSet getNeighbors(E info) { //get neighbors of the vertex
		return getVertex(info).neighbors;
	}
	
	public String toString() { //print the whole graph
		
		String s = "";
		
		for(E key: g.keySet()) {
			s+= key + "\n";
			
			for(Edge e: g.get(key).neighbors){
				s+= "["+e.getOtherVertex(g.get(key))+" "+e.info+"] ";
			}
			s+="\n";
		}
		
		
		return s;
	}
	
	public void remove(E info) { //remove vertex from the graph
		for(Edge v : g.get(info).neighbors) {
			v.getOtherVertex( g.get(info)).neighbors.remove(v); 
			//go through whole vertex and remove the selected vertex from the neighbors list of connected vertexes.
		}
		g.remove(info);
	}
	
	public int size() {
		return g.size(); //size of the graph
	}
	
	public String BreadthFirst(E startinfo, E endinfo){
		
		Vertex start = getVertex(startinfo); //start of the search
		Vertex end = getVertex(endinfo); //destination
		
		HashMap<Vertex, Vertex> leadsTo = new HashMap<>(); //hash map that contains what vertex lead to which vertex.
		//key of the map is what value leads to.
		Vertex curr=start; //current vertex (start with the start vertex)
		ArrayList<Vertex> toVisit = new ArrayList<Vertex>(); //vertex that needs to be visted next.
		toVisit.add(curr); //add current vertex to the toVisit list
		leadsTo.put(curr, null); // add that nothing leads to the first one of the search.
		
		while(toVisit.size()!= 0) { //if there is something needs to be visited,
			curr=toVisit.remove(0); // make the first one in the toVisit list as current vertex
			for(Edge e: curr.neighbors) { //for every edge that current is connected
				if(e.getOtherVertex(curr) == end) { //if it is the destination
					leadsTo.put(e.getOtherVertex(curr),curr); //add the information to leadsTo
					return PrintBackTrace(BackTrace(leadsTo,start,end), (String)startinfo); //print out the result
				}
				if(!leadsTo.containsKey(e.getOtherVertex(curr))) { // if the neighbor is not visited yet,
					toVisit.add(e.getOtherVertex(curr)); //add it to toVisit list
					leadsTo.put(e.getOtherVertex(curr), curr); //add the information that current leads to that neighbor.
				}
			}
		}
		return "Cannot Find the Path"; //if there is no destination, print this.
		
	}
	
	public ArrayList<Edge> BackTrace(HashMap<Vertex,Vertex> map, Vertex start, Vertex end){ 
		//back trace the leadsTo list to find the whole path
		
		ArrayList<Edge> path = new ArrayList<Edge>(); //ArrayList of edges that lead start to end
		Vertex curr = end;// start with the end point
		
		while(curr != null) { //if the current is not the start vertex,
			
			for(Edge e : curr.neighbors) { // look at all neighbors
				if(e.getOtherVertex(curr)== map.get(curr)) {
					//if there is a edge in the leadsTo map, that connect the neighbor and the current vertex, add it to the path
					path.add(0,e);
				}
			}
			curr = map.get(curr); //move the current vertex that current was originated from.
		}
		return path;
	}
	
	public String PrintBackTrace(ArrayList<Edge> path, String start) { //print the back traced list.
		String ans = "";
		int length = 0; //how many times that print line has \n
		
		Vertex curr = g.get(start);
		
		for(Edge e: path) { //for every edge in the path list,
			ans+=curr.toString()+" - "; //start one
			ans+=e.infoToString()+" - "; //what it leads to
			curr = e.getOtherVertex(curr); //change the current position
			if((ans.length() - length * 70 ) / 70 >0) { // if the string is too long, add \n for readability.
				length += 1;
				ans+= "\n";
			}
		}
		ans+=curr.toString(); //add the last vertex to the print statement
		return ans+ "\n"+curr.toString()+"'s "+g.get(start)+" number is "+(path.size()+1);
		
	}
	
	public String BreadthFirstTraverse(E startinfo) { //traverse the whole list to find the farthest vertex from the current one
		Vertex start = getVertex(startinfo); //starting position
		
		HashMap<Vertex, Vertex> leadsTo = new HashMap<>(); //hash map that contains what vertex lead to which vertex.
		//key of the map is what value leads to.
		Vertex curr=start; //current vertex (start with the start vertex)
		ArrayList<Vertex> toVisit = new ArrayList<Vertex>();//vertex that needs to be visited next.
		toVisit.add(curr);
		leadsTo.put(curr, null);
		
		while(toVisit.size()!= 0) {
			curr=toVisit.remove(0); // make the first one in the toVisit list as current vertex
			for(Edge e: curr.neighbors) {  //for every edge that current is connected
				if(!leadsTo.containsKey(e.getOtherVertex(curr))) {// if the neighbor is not visited yet,
					toVisit.add(e.getOtherVertex(curr)); //add it to toVisit list
					leadsTo.put(e.getOtherVertex(curr), curr); //add the information that current leads to that neighbor.
				}
			}
		}
		//the while loop will end when there is no more actors to visit, which means it is the farthest vertex from the start vertex
		
		return startinfo+"'s farthest actor is "+curr.info +"\n"+BreadthFirst(startinfo,curr.info) ;
	}
	
	public int BreadthFirstTraverse_connect(E startinfo, ArrayList<String> a) {
		
		int tot = 0; //total count.
		int encounter = 0; //how many times the method meet the vertex in the arraylist a.
		Vertex start = getVertex(startinfo);
		HashMap<Vertex, Vertex> leadsTo = new HashMap<>(); //hash map that contains what vertex lead to which vertex.
		//key of the map is what value leads to.
		Vertex curr=start; //current vertex (start with the start vertex)
		ArrayList<Vertex> toVisit = new ArrayList<Vertex>(); //vertex that needs to be visited next.
		HashMap<Vertex, Integer> level  = new HashMap<>(); //keep track of the depth of the vertexes
		level.put(curr, 0); // make the first one as level 0
		toVisit.add(curr); //add current vertex to the toVisit list
		leadsTo.put(curr, null);  // add that nothing leads to the first one of the search.	
		while(toVisit.size()!= 0) { //if there is something needs to be visited,
			curr=toVisit.remove(0);  // make the first one in the toVisit list as current vertex
			if(a.contains(curr.info)) { // if it reaches one of the vertex in the arraylist a
				tot+=level.get(curr); //add the count to the total
				encounter ++; //increase the encounter count
				if(encounter == a.size()) { //if it went through every vertex in the arraylist a, stop the traversal.
					return tot;
				}
			}
			for(Edge e: curr.neighbors) {
				if(!leadsTo.containsKey(e.getOtherVertex(curr))) { // if the neighbor is not visited yet,
					level.put(e.getOtherVertex(curr), level.get(curr)+1); //increase the level 
					toVisit.add(e.getOtherVertex(curr)); //add it to toVisit list
					leadsTo.put(e.getOtherVertex(curr), curr); //add the information that current leads to that neighbor.
					
				}
			}
		}
		
		return tot; //return the total after the all traversal.
	}
	
	//test
	public static void main(String[] args) throws IOException {
		LGraph<String,String> g = new LGraph<String,String>();
		g.addVertex("Tiffany");
		g.addVertex("Emma");
		g.addVertex("Linda");
		g.addVertex("Ryan");
		g.addVertex("Diana");
		g.addVertex("Jacob");
		g.addVertex("Cathy");
		g.addVertex("James");
		g.addVertex("Gregory");
		g.addVertex("Ian");
		g.connect("Tiffany", "Emma","a");
		g.connect("Tiffany", "Ryan","b");
		g.connect("Tiffany", "Cathy","c");
		g.connect("Emma", "Linda","d");
		g.connect("Emma", "Diana","e");
		g.connect("Diana", "Jacob","f");
		g.connect("Diana", "Linda","g");
		g.connect("Ryan", "James","h");
		g.connect("Ryan", "Gregory","i");
		g.connect("Tiffany", "Gregory","j");
		g.connect("Ian", "Gregory", "freshie");
		
		System.out.println(g.BreadthFirst("Tiffany", "Jacob"));
		
		
	}
	
	
	
}
