package Maze;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class MazeCreator extends JPanel{
	
	private final int WIDTH = 500;
	private final int SIZE = 20;
	private boolean[][] maze = new boolean[SIZE][SIZE];
	private int start = (int)(Math.random()*(SIZE-2)+1);
	private int end;
	private int curx;
	private int cury;
	private JFrame frame = new JFrame();
	private boolean animate = true;
	private int animate_speed = 10;
	private ArrayList<int[]> xval = new ArrayList<int[]>();
	private int[] temp = new int[2];
	public MazeCreator() {
		frame.setSize(WIDTH, WIDTH);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.add(this);
		frame.setLocationRelativeTo(null);
		frame.setResizable(false);
		frame.setVisible(true);
		}
	
	public void paint(Graphics g) {
		
		for(int i=0; i<maze.length; i++) {
			for(int j=0; j<maze.length; j++) {
				int [] temp= {i,j};
				if(i==0&& j== start) {
					g.setColor(Color.BLUE);
				}else if(i==SIZE-1&&j==end) {
					g.setColor(Color.RED);
				}else if(i==curx && j == cury){
					g.setColor(Color.MAGENTA);
				}else if(xval.contains(temp)) {
					g.setColor(Color.CYAN);
				}else if(maze[i][j]) {
					g.setColor(Color.WHITE);
				}else {
					g.setColor(Color.BLACK);
				}
				g.fillRect(i*(WIDTH/SIZE-2),j*(WIDTH/SIZE-2),(WIDTH/SIZE-2),(WIDTH/SIZE-2));
				g.setColor(Color.BLACK);
				g.drawRect(i*(WIDTH/SIZE-2),j*(WIDTH/SIZE-2),(WIDTH/SIZE-2),(WIDTH/SIZE-2));
			}
		}
		
	}
	
	public void drawMaze() throws InterruptedException {
		int x = 1;
		int y = start;
		
		maze[x][y] = true;
		
		boolean reached = false;
		
		while(!reached) {
			
			/*
			 * up 0.27
			 * down 0.27
			 * right 0.27
			 * left  0.19
			 */
			
			double op = Math.random();
			if(op <0.27 && !(maze[x-1][y-1]&&maze[x-1][y] || maze[x+1][y-1]&&maze[x+1][y]) && !maze[x][y+1]) { //up
				y -= 1;
			}else if(op<0.27|| op>= 0.54 && !(maze[x][y-1]&&maze[x+1][y-1] || maze[x][y+1]&&maze[x+1][y+1]) && !maze[x+1][y]) { //right
				x += 1;
			}else if(op<0.54 || op>=0.81 && !(maze[x-1][y]&&maze[x-1][y+1] || maze[x+1][y]&&maze[x+1][y+1] && !maze[x][y-1])) { //down
				y += 1;
			}else if(op>0.81 && !(maze[x-1][y-1]&&maze[x][y-1] || maze[x-1][y+1]&&maze[x][y+1]&& !maze[x-1][y])) { //left
				x -=1;
			}
			
			if(y<1) {
				y++;
			}
			if(y>SIZE-2) {
				y--;
			}
			if(x<1) {
				x++;
			}
			curx = x;
			cury = y;
			maze[x][y] = true;
			temp[0] = x;
			temp[1] = y;
			xval.add(temp);
			if(x == SIZE-1) {
				reached = true;
				end = y;
			}
			frame.getContentPane().repaint();
			if(animate) {
				Thread.sleep(animate_speed);
			}
		}
		
		//branch
		int truecount  = 0;
		for(int i=1; i<maze.length-1; i++) {
			for(int j=1; j<maze[i].length-1; j++){
				if(maze[i][j]) {
					truecount++;
				}
				if(truecount >= (int)(SIZE*SIZE*0.5)) {
					return;
				}
				//check whether things surround only one true.
				int count = 0;
				if(maze[i][j+1]) {
					count++;
				}
				if(maze[i][j-1]) {
					count++;
				}
				if(maze[i-1][j]) {
					count++;
				}
				if(maze[i+1][j]) {
					count++;
				}
				if(count == 1) {
					int nx = i;
					int ny = j;
					boolean done = false;
					while(!done) {
						int op = (int)(Math.random()*4);
						if(op == 0 && !(maze[nx-1][ny-1]&&maze[nx-1][ny] || maze[nx+1][ny-1]&&maze[nx+1][ny])) { //up
							ny -= 1;
						}else if(op == 1 && !(maze[nx][ny-1]&&maze[nx+1][ny-1] || maze[nx][ny+1]&&maze[nx+1][ny+1])) { //right
							nx += 1;
						}else if(op == 2 && !(maze[nx-1][ny]&&maze[nx-1][ny+1] || maze[nx+1][ny]&&maze[nx+1][ny+1] )) { //down
							ny += 1;
						}else if(op == 3 && !(maze[nx-1][ny-1]&&maze[nx][ny-1] || maze[nx-1][ny+1]&&maze[nx][ny+1])) { //left
							nx -=1;
						}
			
						if(nx<2 || ny>SIZE-2 || ny<2 || nx >SIZE-2) {
							done = true;
						}
						curx = nx;
						cury = ny;
						maze[nx][ny] = true;
						frame.getContentPane().repaint();
					}
				}
			}
		}
		
		//make the maze harder
		for(int i=1; i<maze.length-1; i++) {
			for(int j=1; j<maze[i].length-1; j++){
				curx = i;
				cury = j;
				int count = 0;
				for(int a = -1; a<2; a++) {
					for(int b=-1; b<2; b++) {
						if(maze[i+a][j+b]) {
							count++;
						}
					}
				}
				System.out.println(count);
				temp[0] = i;
				temp[1] = j;
				System.out.println(temp);
				
				if(count>=6 && !xval.contains(temp)) {
					if(Math.random()>0.66) {
						System.out.println("done");
						maze[i][j] = false;
						frame.getContentPane().repaint();
					}
				}
				
			}
		}
		curx = -1;
		cury = -1;
		System.out.println(xval);
	}
	
	public static void main(String[] args) throws InterruptedException {
		MazeCreator runner = new MazeCreator();
		runner.drawMaze();
	}
}
